#!/bin/env bash


##
## Run rsync backup on the local machine:
##
##  $ rsync_backup_root
##

##
## Run rsync backup on a remote machine:
##
##  $ rsync_backup_root hostname
##

##
## Run rsync backup as a different user on the remote machine:
##
##  $ rsync_backup_root root@hostname
##


function rsync_backup_root(){
  export USERINPUTHOST BACKUP_TARGET_HOSTNAME
  USERINPUTHOST="${*}"

  ## Define variables
  function rsync_backup_define_variables(){
    export BACKUP_TARGET BACKUP_DEST
    local BACKUP_TARGET_HOST BACKUP_TARGET_PATH ISTARGETREMOTE MONTH COLON

    ## Check if USERINPUTDIR is not defined. If so, perform a backup on the current machine.
    ##  0=Local 1=Remote
    [[ -z "${USERINPUTHOST}" ]] && ISTARGETREMOTE="0" || ISTARGETREMOTE="1"
    if [[ "${ISTARGETREMOTE}" -ge 1 ]]; then
      BACKUP_TARGET_HOST="${USERINPUTHOST}"
      BACKUP_TARGET_HOSTNAME="${USERINPUTHOST}"
      COLON=":"
    else
      unset BACKUP_TARGET_HOST
      BACKUP_TARGET_HOSTNAME="$(hostname)"
    fi

    ## Backup the root directory of either a remote or local machine
    BACKUP_TARGET_PATH="/"
    MONTH=$(date +%B)
    BACKUP_TARGET="${BACKUP_TARGET_HOST}${COLON}${BACKUP_TARGET_PATH}"
    BACKUP_DEST="/backup/${BACKUP_TARGET_HOSTNAME}-backups/incremental/${MONTH}"
    return 0
  }

  ## Confirm before running backup
  function rsync_backup_confirm(){
    local confirm_start

    clear
    printf '\e[0;1;38;5;201m%.s─' $(seq 0  $(($(tput cols) - 1))); printf "\e[0m\n"
    printf "\e[0;38;5;226mIs this information correct? \e[0;1;38;5;7m[\e[0;38;5;46my\e[0;38;5;7m/\e[0;1;38;5;196mN\e[0;38;5;7m]\e[0m\n\n"
    printf "\t\e[0;38;5;40mTarget     \e[0;38;5;15m :\t\e[0;1;38;5;93m%s\e[0m\n" "${BACKUP_TARGET}"
    printf "\t\e[0;38;5;40mDestination\e[0;38;5;15m :\t\e[0;1;38;5;27m%s\e[0m\n\n" "${BACKUP_DEST}"
    printf '\e[0;1;38;5;201m%.s─' $(seq 0  $(($(tput cols) - 1))); printf "\e[0m\n\n"

    ## Restore cursor if trap activated
    trap 'printf "\e[?25h\e[2K\r"; exit 1' SIGHUP SIGINT SIGQUIT SIGABRT
    printf "\e[?25l"    ## Hide cursor
    read -r -s -N 1 -t 10 confirm_start
    if [[ "${confirm_start}" == "Y" ]] || [[ "${confirm_start}" == "y" ]]; then
      printf "\e[?25h"  ## Restore cursor
      return 0
    else
      printf "\e[?25h"  ## Restore cursor
      printf "\e[0;38;5;226mExiting...\e[0m\n\n"
      exit 1
    fi
  }

  ## Create backup destination directories
  function rsync_backup_make_dirs(){
    if [[ ! -d "${BACKUP_DEST}" ]]; then
      mkdir -pv "${BACKUP_DEST}" && return 0 || exit 1
    fi
  }

  ## Run the rsync backup
  function rsync_backup_run_backup(){
    ## Confirm rsync is installed
    command -v rsync >/dev/null 2>&1 || printf "\e[0;38;5;196mrsync not installed\e[0m\n" || return 1
    ## Run backup
    rsync --exclude={"/home/*","/dev/*","/proc/*","/sys/*","/var/tmp/*","/var/lib/libvirt/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found","/backup","/backups"} --verbose --archive "${BACKUP_TARGET}/" "${BACKUP_DEST}/" \
      && printf "\e[0;38;5;46mRsync Backup Completed:\t%s\e[0m\n"   "${BACKUP_TARGET_HOSTNAME}" \
      || printf "\n\e[0;3;38;5;196mRsync Backup Failed\t\e[0;1;38;5;190m%s\e[0m\n\n"  "${BACKUP_TARGET_HOSTNAME}" \
      || exit 1                                                                               \
      && return 0

      # || printf '\e[0;1;38;5;9m%.s─' $(seq 0  $(($(tput cols) - 1))); printf "\e[0m\n"        \
      # || printf '\e[0;1;38;5;9m%.s─' $(seq 0  $(($(tput cols) - 1))); printf "\e[0m\n"        \
  }

  ## Run functions
  rsync_backup_define_variables \
  && rsync_backup_confirm       \
  && rsync_backup_make_dirs     \
  && rsync_backup_run_backup

  ## Run functions
  # rsync_backup_define_variables || return 1
  # rsync_backup_confirm          || return 1
  # rsync_backup_make_dirs        || return 1
  # rsync_backup_run_backup       || return 1

  return 0
}

## Call main function
rsync_backup_root "${@}" || exit 1

  # printf '\e[0;1;38;5;201m%.s─' $(seq 0  $(($(tput cols) - 1))); printf "\e[0m\n"
  # printf "\e[0;38;5;46mBackup Complete\e[0m\n\n"
  # printf "\t\e[0;38;5;33mTarget     \e[0;38;5;15m :\t\e[0;1;38;5;226m%s\e[0m\n" "${BACKUP_TARGET}"
  # printf "\t\e[0;38;5;33mDestination\e[0;38;5;15m :\t\e[0;1;38;5;9m%s/\e[0m\n\n" "${BACKUP_DEST}"
  # printf '\e[0;1;38;5;201m%.s─' $(seq 0  $(($(tput cols) - 1))); printf "\e[0m\n"

## Unset functions
unset -f rsync_backup_define_variables rsync_backup_confirm rsync_backup_make_dirs rsync_backup_run_backup rsync_backup_root
