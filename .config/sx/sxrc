#!/bin/env bash
### {{{ ShellCheck
# shellcheck source=/etc/xprofile
# shellcheck source=~/.xprofile
# shellcheck source=~/.config/zsh/.zprofile
# shellcheck source=~/.config/zsh/.zshrc
### Add 'shellcheck external-sources=true' to your shellcheckrc
### }}}

### [~]==================[~]
### [~]    Variables
### [~]==================[~]
###{{{ Variables

color_reset='\e[0m'
color_red='\e[0;38;5;196m'
color_green='\e[0;38;5;46m'
color_yellow='\e[0;38;5;190m'
color_white='\e[0;38;5;15m'
color_gray='\e[0;38;5;8m'
color_magenta='\e[0;38;5;201m'
color_cyan='\e[0;38;5;82m'

###}}}

### [~]==================[~]
### [~]    xprofile
### [~]==================[~]
###{{{ xprofile
# Make sure this is before the 'exec' command or it won't be sourced.
if [[ -f /etc/xprofile ]]; then
  . /etc/xprofile || printf "${color_red}Errors running '/etc/xprofile'${color_reset}\n"
else
  printf "${color_red}ERROR:%s:Cannot locate '/etc/xprofile'\n${color_reset}" "$0"
fi

if [[ -f ~/.xprofile   ]]; then
  . ~/.xprofile   || printf "${color_red}Errors running '~/.xprofile'\n${color_reset}"
else
  printf "${color_red}ERROR:%s: Cannot locate '~/.xprofile'\n${color_reset}" "$0"
fi
### }}}

### [~]==================[~]
### [~]    AwesomeWM
### [~]==================[~]
###{{{ awesome
WM_PATH="$(command -v awesome)"            # /usr/bin/awesome"
WM_LOGGING_DIR="${XDG_CACHE_HOME}/awesome" # ~/.cache/awesome
WM_LOGGING_ENABLED=1                       # enable logging (comment out to disable logging)

## Perform checks before calling WM
function WMExists(){
  [[ -f "${WM_PATH}" ]] && return 0 || return 1
} ## Confirm Logging dir exists
function WMloggingDirExists(){
  [[ -d "${WM_LOGGING_DIR}" ]] && return 0 || return 1
} ## Confirm Logging dir exists
function createWMloggingDir(){
  mkdir -p "${WM_LOGGING_DIR}" && return 0 || return 1
} ## Create logging dir

## exec WM
function start_WM_w_log(){
  exec "$WM_PATH" >>"${WM_LOGGING_DIR}/stdout" 2>> "${WM_LOGGING_DIR}/stderr"
} ## Start WM with logging
function start_WM_no_log(){
  exec "$WM_PATH"
} ## Start WM without logging

#                                 ## Check if WM defined
if [[ -n "${WM_PATH}" ]]; then    ## Check if WM exists
  if WMExists; then               ## Check if WM logging dir exists
    if WMloggingDirExists; then   ## directory exists, enable logging
      WM_logging_enabled=1
    else                          ## Cannot find logging dir, attempt to create dir
      printf "${color_yellow}Cannot locate '%s' log output directory: '%s'${color_reset}\n" "${WM_PATH}" "${WM_LOGGING_DIR}"
      printf "${color_yellow}Creating logging directory: '%s'${color_reset}\n" "${WM_LOGGING_DIR}"
      if createWMloggingDir; then ## Created directory, enable logging
        WM_logging_enabled=1
      else                        ## Unable to create directory, disable logging, and continue.
        printf "${color_red}Failed to create logging directory: '%s'${color_reset}\n" "${WM_LOGGING_DIR}"
        printf "${color_yellow}Starting window manager without logging ... '${color_reset}\n"
        WM_logging_enabled=""
        unset WM_logging_enabled
      fi
    fi
  else                            ## Cannot find  defined WM
    printf "${color_red}Cannot find window manager '%s' in PATH ${color_reset}\n" "${WM_PATH}"
    sleep 3
    return 1
  fi
else                              ## WM is not defined
  #shellcheck disable=2182
  printf "\n${color_red}Window manager is not defined\n${color_yellow}define environment variable: ${color_green}'WM_PATH'${color_yellow} to the full path to your window manager ${color_magenta}:)${color_reset}\n" "${WM_PATH}"
  printf "${color_yellow}\n${color_yellow}\te.g.  ${color_gray}(Replace 'awesome' with your window manager.)${color_cyan}\n\n\t\texport${color_green} WM_PATH${color_white}=\"${color_magenta}\$(${color_cyan}command${color_magenta} -v ${color_white}awesome${color_magenta})\${color_white}\"${color_reset}\n\n${color_reset}"
  sleep 3
  return 1
fi
### }}}

### [~]==================[~]
### [~]    MAIN
### [~]==================[~]
### {{{ MAIN
if [[ -n ${WM_LOGGING_ENABLED} ]]; then     ## Check if logging is enabled
  if [[ -n "${WM_logging_enabled}" ]]; then ## If logging is enabled, start WM with logging
      start_WM_w_log && return 0 || return 1
  fi
else                                        ## If logging is enabled, start WM without logging
  WM_logging_enabled=""
  unset WM_logging_enabled
  start_WM_no_log && return 0 || return 1
fi
### }}}
