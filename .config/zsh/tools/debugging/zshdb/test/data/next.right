(nexting.sh:3):
p () { print ${funcfiletrace[0]##*/} print '===' }
+set basename on
Show short filenames (the basename) is on.
+# Make sure autostep is off for next text
+set force off
Stepping forces stopping at a new line is off.
+show force
Show stepping forces a new line is off.
+next
(nexting.sh:4):
setopt ksharrays
+where 1
->0 in file `nexting.sh' at line 4
+n
(nexting.sh:5):
p
+where 1
->0 in file `nexting.sh' at line 5
+# Test that next+ skips multiple statements
+next+
nexting.sh:5
===
(nexting.sh:6):
p
+where 1
->0 in file `nexting.sh' at line 6
+# Same thing - but should stop at 2nd statement in line
+next
nexting.sh:6
===
(nexting.sh:7):
p
+where 1
->0 in file `nexting.sh' at line 7
+next
nexting.sh:7
===
(nexting.sh:8):
p
+where 1
->0 in file `nexting.sh' at line 8
+# Now check with set force on
+set force on
Stepping forces stopping at a new line is on.
+show force
Show stepping forces a new line is on.
+next
nexting.sh:8
===
(nexting.sh:9):
p
+where 1
->0 in file `nexting.sh' at line 9
+# Override force
+next-
nexting.sh:9
===
(nexting.sh:9):
x=9
+where 1
->0 in file `nexting.sh' at line 9
+n-
(nexting.sh:10):
p
+where 1
->0 in file `nexting.sh' at line 10
+# A null command should use the last next
+n-
nexting.sh:10
===
(nexting.sh:10):
x=10
+where 1
->0 in file `nexting.sh' at line 10
+n-
(nexting.sh:11):
p
+next
nexting.sh:11
===
(nexting.sh:11):
x=11
+where 1
->0 in file `nexting.sh' at line 11
+# Try a null command the other way
+n+
(nexting.sh:12):
p
+where 1
->0 in file `nexting.sh' at line 12
+n+
nexting.sh:12
===
(nexting.sh:13):
p
+where 1
->0 in file `nexting.sh' at line 13
+quit
zshdb: That's all, folks...
