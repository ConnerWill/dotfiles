<!-- THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT IT MANUALLY -->

# Built-in Sources

This is an automatically generated list of all null-ls built-in sources.

See [BUILTIN_CONFIG](BUILTIN_CONFIG.md) to learn how to set up and configure these sources.

## Code Actions

### [eslint](https://github.com/eslint/eslint)

Injects actions to fix ESLint issues or ignore broken rules.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact", "vue" }`
- Method: `code_action`
- Command: `eslint`
- Args: `{ "-f", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

### [eslint_d](https://github.com/mantoni/eslint_d.js)

Injects actions to fix ESLint issues or ignore broken rules. Like ESLint, but faster.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact", "vue" }`
- Method: `code_action`
- Command: `eslint_d`
- Args: `{ "-f", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

#### Notes

- Once spawned, the server will continue to run in the background. This is normal and not related to null-ls. You can stop it by running `eslint_d stop` from the command line.

### gitrebase

Injects actions to change `gitrebase` command (e.g. using `squash` instead of `pick`).

#### Usage


#### Defaults

- Filetypes: `{ "gitrebase" }`
- Method: `code_action`

### [gitsigns](https://github.com/lewis6991/gitsigns.nvim)

Injects code actions for Git operations at the current cursor position (stage / preview / reset hunks, blame, etc.).

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `code_action`

### [proselint](https://github.com/amperser/proselint)

An English prose linter. Can fix some issues via code actions.

#### Usage


#### Defaults

- Filetypes: `{ "markdown", "tex" }`
- Method: `code_action`
- Command: `proselint`
- Args: `{ "--json" }`

### [refactoring](https://github.com/ThePrimeagen/refactoring.nvim)

The Refactoring library based off the Refactoring book by Martin Fowler.

#### Usage


#### Defaults

- Filetypes: `{ "go", "javascript", "lua", "python", "typescript" }`
- Method: `code_action`

#### Notes

- Requires visually selecting the code you want to refactor and calling `:'<,'>lua vim.lsp.buf.range_code_action()` (for the default handler) or `:'<,'>Telescope lsp_range_code_actions` (for Telescope).

### [shellcheck](https://www.shellcheck.net/)

Provides actions to disable ShellCheck errors/warnings, either for the current line or for the entire file.

#### Usage


#### Defaults

- Filetypes: `{ "sh" }`
- Method: `code_action`
- Command: `shellcheck`
- Args: `{ "--format", "json1", "--source-path=$DIRNAME", "--external-sources", "-" }`

#### Notes

- Running the action to disable a rule for the current line adds a disable directive above the line or appends the rule to an existing disable directive for that line.
- Running the action to disable a rule for the current file adds a disable directive at the top of the file or appends the rule to an existing file disable directive.
- The first non-comment line in a script is not eligible for a line-level disable directive. See [shellcheck#1877](https://github.com/koalaman/shellcheck/issues/1877).

### [statix](https://github.com/nerdypepper/statix)

Lints and suggestions for the nix programming language.

#### Usage


#### Defaults

- Filetypes: `{ "nix" }`
- Method: `code_action`
- Command: `statix`
- Args: `{ "check", "--stdin", "--format=json" }`

### [xo](https://github.com/xojs/xo)

‚ù§Ô∏è JavaScript/TypeScript linter (ESLint wrapper) with great defaults

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact" }`
- Method: `code_action`
- Command: `xo`
- Args: `{ "--reporter", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

## Completion

### [luasnip](https://github.com/L3MON4D3/LuaSnip)

Snippet engine for Neovim, written in Lua.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `completion`

#### Notes

- Registering this source will show available snippets in the completion list, but luasnip is in charge of expanding them. Consult [luasnip's documentation](https://github.com/L3MON4D3/LuaSnip#keymaps) to set up keymaps for expansion and jumping.

### spell

Spell suggestions completion source.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `completion`

### tags

Tags completion source.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `completion`

### [vsnip](https://github.com/hrsh7th/vim-vsnip)

Snippets managed by vim-vsnip.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `completion`

#### Notes

- Registering this source will show available snippets in the completion list, but vim-vsnip is in charge of expanding them. See [vim-vsnip's documentation](https://github.com/hrsh7th/vim-vsnip#2-setting) for setup instructions.

## Diagnostics

### [actionlint](https://github.com/rhysd/actionlint)

Actionlint is a static checker for GitHub Actions workflow files.

#### Usage


#### Defaults

- Filetypes: `{ "yaml" }`
- Method: `diagnostics`
- Command: `actionlint`
- Args: `{ "-no-color", "-format", "{{json .}}", "-" }`

### [alex](https://github.com/get-alex/alex)

Catch insensitive, inconsiderate writing.

#### Usage


#### Defaults

- Filetypes: `{ "markdown" }`
- Method: `diagnostics`
- Command: `alex`
- Args: `{ "--stdin", "--quiet" }`

### [ansiblelint](https://github.com/ansible-community/ansible-lint)

Linter for Ansible playbooks, roles and collections.

#### Usage


#### Defaults

- Filetypes: `{ "yaml.ansible" }`
- Method: `diagnostics`
- Command: `ansible-lint`
- Args: `{ "-f", "codeclimate", "-q", "--nocolor", "$FILENAME" }`

### [buf](https://github.com/bufbuild/buf)

A new way of working with Protocol Buffers.

#### Usage


#### Defaults

- Filetypes: `{ "proto" }`
- Method: `diagnostics`
- Command: `buf`
- Args: `{ "lint", "$FILENAME#include_package_files=true" }`

### [buildifier](https://github.com/bazelbuild/buildtools/tree/master/buildifier)


#### Usage


#### Defaults

- Filetypes: `{ "bzl" }`
- Method: `diagnostics`
- Command: `buildifier`
- Args: `{ "-mode=check", "-lint=warn", "-format=json", "-path=$FILENAME" }`

### [checkmake](https://github.com/mrtazz/checkmake)


#### Usage


#### Defaults

- Filetypes: `{ "make" }`
- Method: `diagnostics`
- Command: `checkmake`
- Args: `{ "--format='{{.LineNumber}}:{{.Rule}}:{{.Violation}}'", "$FILENAME" }`

### [chktex](https://www.nongnu.org/chktex/)


#### Usage


#### Defaults

- Filetypes: `{ "tex" }`
- Method: `diagnostics`
- Command: `chktex`
- Args: `{ "-q", "-f%l:%c:%d:%k:%n:%m\n" }`

### [codespell](https://github.com/codespell-project/codespell)

Codespell finds common misspellings in text files.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `diagnostics`
- Command: `codespell`
- Args: `{ "-" }`

### [cppcheck](https://github.com/danmar/cppcheck)

A tool for fast static analysis of C/C++ code.

#### Usage


#### Defaults

- Filetypes: `{ "cpp", "c" }`
- Method: `diagnostics`
- Command: `cppcheck`
- Args: `{ "--enable=warning,style,performance,portability", "--template=gcc", "$FILENAME" }`

### [credo](https://hexdocs.pm/credo)

Static analysis of `elixir` files for enforcing code consistency.

#### Usage


#### Defaults

- Filetypes: `{ "elixir" }`
- Method: `diagnostics`
- Command: `mix`
- Args: `{ "credo", "suggest", "--format", "json", "--read-from-stdin", "$FILENAME" }`

#### Notes

- Searches upwards from the buffer to the project root and tries to find the first `.credo.exs` file in case the project has nested `credo` configs.

### [cspell](https://github.com/streetsidesoftware/cspell)


#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `diagnostics`
- Command: `cspell`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/diagnostics/cspell.lua))

### [cue_fmt](https://github.com/cue-lang/cue)

Reports on formatting errors in .cue language files.

#### Usage


#### Defaults

- Filetypes: `{ "cue" }`
- Method: `diagnostics`
- Command: `cue`
- Args: `{ "fmt", "$FILENAME" }`

### [curlylint](https://www.curlylint.org/)

Experimental HTML templates linting for Jinja, Nunjucks, Django templates, Twig, and Liquid.

#### Usage


#### Defaults

- Filetypes: `{ "jinja.html", "htmldjango" }`
- Method: `diagnostics`
- Command: `curlylint`
- Args: `{ "--quiet", "-", "--format", "json", "--stdin-filepath", "$FILENAME" }`

### [deadnix](https://github.com/astro/deadnix)

Scan Nix files for dead code.

#### Usage


#### Defaults

- Filetypes: `{ "nix" }`
- Method: `diagnostics`
- Command: `deadnix`
- Args: `{ "--output-format=json", "$FILENAME" }`

### [djlint](https://github.com/Riverside-Healthcare/djLint)

‚ú® üìú ü™Ñ ‚ú® HTML Template Linter and Formatter.

#### Usage


#### Defaults

- Filetypes: `{ "django", "jinja.html", "htmldjango" }`
- Method: `diagnostics`
- Command: `djlint`
- Args: `{ "$FILENAME" }`

### [editorconfig_checker](https://github.com/editorconfig-checker/editorconfig-checker)

A tool to verify that your files are in harmony with your `.editorconfig`.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `diagnostics`
- Command: `ec`
- Args: `{ "-no-color", "$FILENAME" }`

### [erb_lint](https://github.com/Shopify/erb-lint)

Lint your ERB or HTML files

#### Usage


#### Defaults

- Filetypes: `{ "eruby" }`
- Method: `diagnostics`
- Command: `erblint`
- Args: `{ "--format", "json", "--stdin", "$FILENAME" }`

### [eslint](https://github.com/eslint/eslint)

A linter for the JavaScript ecosystem.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact", "vue" }`
- Method: `diagnostics`
- Command: `eslint`
- Args: `{ "-f", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

### [eslint_d](https://github.com/mantoni/eslint_d.js/)

Like ESLint, but faster.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact", "vue" }`
- Method: `diagnostics`
- Command: `eslint_d`
- Args: `{ "-f", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

#### Notes

- Once spawned, the server will continue to run in the background. This is normal and not related to null-ls. You can stop it by running `eslint_d stop` from the command line.

### [fish](https://github.com/fish-shell/fish-shell)

Basic linting is available for fish scripts using `fish --no-execute`.

#### Usage


#### Defaults

- Filetypes: `{ "fish" }`
- Method: `diagnostics`
- Command: `fish`
- Args: `{ "--no-execute", "$FILENAME" }`

### [flake8](https://github.com/PyCQA/flake8)


#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `flake8`
- Args: `{ "--format", "default", "--stdin-display-name", "$FILENAME", "-" }`

### [gccdiag](https://gitlab.com/andrejr/gccdiag)


#### Usage


#### Defaults

- Filetypes: `{ "c", "cpp" }`
- Method: `diagnostics_on_save`
- Command: `gccdiag`
- Args: `{ "--default-args", "-S -x $FILEEXT", "-i", "-fdiagnostics-color", "--", "$FILENAME" }`

### [gitlint](https://jorisroovers.com/gitlint/)

Linter for Git commit messages.

#### Usage


#### Defaults

- Filetypes: `{ "gitcommit" }`
- Method: `diagnostics`
- Command: `gitlint`
- Args: `{ "--msg-filename", "$FILENAME" }`

### [golangci_lint](https://golangci-lint.run/)

A Go linter aggregator.

#### Usage


#### Defaults

- Filetypes: `{ "go" }`
- Method: `diagnostics_on_save`
- Command: `golangci-lint`
- Args: `{ "run", "--fix=false", "--fast", "--out-format=json", "$DIRNAME", "--path-prefix", "$ROOT" }`

### [hadolint](https://github.com/hadolint/hadolint)

A smarter Dockerfile linter that helps you build best practice Docker images.

#### Usage


#### Defaults

- Filetypes: `{ "dockerfile" }`
- Method: `diagnostics`
- Command: `hadolint`
- Args: `{ "--no-fail", "--format=json", "-" }`

### [haml_lint](https://github.com/sds/haml-lint)

Tool for writing clean and consistent HAML.

#### Usage


#### Defaults

- Filetypes: `{ "haml" }`
- Method: `diagnostics`
- Command: `haml-lint`
- Args: `{ "--reporter", "json", "$FILENAME" }`

### [jsonlint](https://github.com/zaach/jsonlint)

A pure JavaScript version of the service provided at jsonlint.com.

#### Usage


#### Defaults

- Filetypes: `{ "json" }`
- Method: `diagnostics`
- Command: `jsonlint`
- Args: `{ "--compact" }`

### [ktlint](https://ktlint.github.io/)

An anti-bikeshedding Kotlin linter with built-in formatter.

#### Usage


#### Defaults

- Filetypes: `{ "kotlin" }`
- Method: `diagnostics_on_save`
- Command: `ktlint`
- Args: `{ "--relative", "--reporter=json" }`

### [luacheck](https://github.com/lunarmodules/luacheck)

A tool for linting and static analysis of Lua code.

#### Usage


#### Defaults

- Filetypes: `{ "lua" }`
- Method: `diagnostics`
- Command: `luacheck`
- Args: `{ "--formatter", "plain", "--codes", "--ranges", "--filename", "$FILENAME", "-" }`

### [markdownlint](https://github.com/DavidAnson/markdownlint)

Markdown style and syntax checker.

#### Usage


#### Defaults

- Filetypes: `{ "markdown" }`
- Method: `diagnostics`
- Command: `markdownlint`
- Args: `{ "--stdin" }`

### [mdl](https://github.com/markdownlint/markdownlint)

A tool to check Markdown files and flag style issues.

#### Usage


#### Defaults

- Filetypes: `{ "markdown" }`
- Method: `diagnostics`
- Command: `mdl`
- Args: `{ "--json" }`

### [misspell](https://github.com/client9/misspell)

Checks commonly misspelled English words in source files.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `diagnostics`
- Command: `misspell`

### [mlint](https://www.mathworks.com/help/matlab/ref/mlint.html)

Linter for MATLAB files

#### Usage


#### Defaults

- Filetypes: `{ "matlab" }`
- Method: `diagnostics_on_save`
- Command: `mlint`
- Args: `{ "$FILENAME" }`

### [mypy](https://github.com/python/mypy)

Mypy is an optional static type checker for Python that aims to combine the

#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `mypy`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/diagnostics/mypy.lua))

### [php](https://www.php.net/)

Uses the php command-line tool's built in `-l` flag to check for syntax errors.

#### Usage


#### Defaults

- Filetypes: `{ "php" }`
- Method: `diagnostics`
- Command: `php`
- Args: `{ "-l", "-d", "display_errors=STDERR", "-d", " log_errors=Off" }`

### [phpcs](https://github.com/squizlabs/PHP_CodeSniffer)

PHP_CodeSniffer is a script that tokenizes PHP, JavaScript and CSS files to detect violations of a defined coding standard.

#### Usage


#### Defaults

- Filetypes: `{ "php" }`
- Method: `diagnostics`
- Command: `phpcs`
- Args: `{ "--report=json", "-q", "-s", "--runtime-set", "ignore_warnings_on_exit", "1", "--runtime-set", "ignore_errors_on_exit", "1", "--stdin-path=$FILENAME", "-" }`

### [phpmd](https://github.com/phpmd/phpmd/)

Runs PHP Mess Detector against PHP files.

#### Usage


#### Defaults

- Filetypes: `{ "php" }`
- Method: `diagnostics`
- Command: `phpmd`
- Args: `{ "$FILENAME", "json" }`

### [phpstan](https://github.com/phpstan/phpstan)

PHP static analysis tool.

#### Usage


#### Defaults

- Filetypes: `{ "php" }`
- Method: `diagnostics`
- Command: `phpstan`
- Args: `{ "analyze", "--error-format", "json", "--no-progress", "$FILENAME" }`

#### Notes

- Requires a valid `phpstan.neon` at root.
- If in place validation is required set `method` to `diagnostics_on_save`  and `to_temp_file` to `false`

### [proselint](https://github.com/amperser/proselint)

An English prose linter.

#### Usage


#### Defaults

- Filetypes: `{ "markdown", "tex" }`
- Method: `diagnostics`
- Command: `proselint`
- Args: `{ "--json" }`

### [protoc_gen_lint](https://github.com/ckaznocha/protoc-gen-lint)

A plug-in for Google's Protocol Buffers (protobufs) compiler to lint .proto files for style violations.

#### Usage


#### Defaults

- Filetypes: `{ "proto" }`
- Method: `diagnostics`
- Command: `protoc`
- Args: `{ "--lint_out", "$FILENAME", "-I", "/tmp", "$FILENAME" }`

### [protolint](https://https//github.com/yoheimuta/protolint)

A pluggable linter and fixer to enforce Protocol Buffer style and conventions.

#### Usage


#### Defaults

- Filetypes: `{ "proto" }`
- Method: `diagnostics`
- Command: `protolint`
- Args: `{ "--reporter", "json", "$FILENAME" }`

### [psalm](https://psalm.dev/)

A static analysis tool for finding errors in PHP applications.

#### Usage


#### Defaults

- Filetypes: `{ "php" }`
- Method: `diagnostics`
- Command: `psalm`
- Args: `{ "--output-format=json", "--no-progress", "$FILENAME" }`

### [puglint](https://github.com/pugjs/pug-lint)

An unopinionated and configurable linter and style checker for Pug.

#### Usage


#### Defaults

- Filetypes: `{ "pug" }`
- Method: `diagnostics`
- Command: `pug-lint`
- Args: `{ "--reporter=inline", "$FILENAME" }`

### [puppet_lint](http://puppet-lint.com/)

Check that your Puppet manifest conforms to the style guide.

#### Usage


#### Defaults

- Filetypes: `{ "puppet", "epuppet" }`
- Method: `diagnostics`
- Command: `puppet-lint`
- Args: `{ "--json", "$FILENAME" }`

### [pydocstyle](https://www.pydocstyle.org/)


#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `pydocstyle`
- Args: `{ "$FILENAME" }`

#### Notes

- May fail to resolve config files. See [the wiki](https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Source-specific-Configuration#pydocstyle) for workarounds.

### [pylama](https://github.com/klen/pylama)

Code audit tool for Python.

#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `pylama`
- Args: `{ "--from-stdin", "$FILENAME", "-f", "json" }`

### [pylint](https://github.com/PyCQA/pylint)

Pylint is a Python static code analysis tool which looks for programming errors, helps enforcing a coding standard, sniffs for code smells and offers simple refactoring suggestions.

#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `pylint`
- Args: `{ "--from-stdin", "$FILENAME", "-f", "json" }`

### [pyproject_flake8](https://github.com/csachs/pyproject-flake8)


#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `pflake8`
- Args: `{ "--format", "default", "--stdin-display-name", "$FILENAME", "-" }`

### [qmllint](https://doc-snapshots.qt.io/qt6-dev/qtquick-tools-and-utilities.html#qmllint)


#### Usage


#### Defaults

- Filetypes: `{ "qml" }`
- Method: `diagnostics`
- Command: `qmllint`
- Args: `{ "$FILENAME" }`

### [revive](https://revive.run/)

Fast, configurable, extensible, flexible, and beautiful linter for Go.

#### Usage


#### Defaults

- Filetypes: `{ "go" }`
- Method: `diagnostics_on_save`
- Command: `revive`
- Args: `{ "-formatter", "json", "./..." }`

### [rpmspec](https://rpm.org/)

Command line tool to parse RPM spec files.

#### Usage


#### Defaults

- Filetypes: `{ "spec" }`
- Method: `diagnostics`
- Command: `rpmspec`
- Args: `{ "-P", "$FILENAME" }`

### [rstcheck](https://github.com/myint/rstcheck)

Checks syntax of reStructuredText and code blocks nested within it.

#### Usage


#### Defaults

- Filetypes: `{ "rst" }`
- Method: `diagnostics_on_save`
- Command: `rstcheck`
- Args: `{ "-r", "$DIRNAME" }`

### [rubocop](https://rubocop.org/)

The Ruby Linter/Formatter that Serves and Protects.

#### Usage


#### Defaults

- Filetypes: `{ "ruby" }`
- Method: `diagnostics`
- Command: `rubocop`
- Args: `{ "-f", "json", "--stdin", "$FILENAME" }`

### [selene](https://kampfkarren.github.io/selene/)

Command line tool designed to help write correct and idiomatic Lua code.

#### Usage


#### Defaults

- Filetypes: `{ "lua" }`
- Method: `diagnostics`
- Command: `selene`
- Args: `{ "--display-style", "quiet", "-" }`

### [semgrep](https://semgrep.dev/)

Semgrep is a fast, open-source, static analysis tool for finding bugs and enforcing code standards at editor, commit, and CI time.

#### Usage


#### Defaults

- Filetypes: `{ "typescript", "typescriptreact", "ruby", "python", "java", "go" }`
- Method: `diagnostics`
- Command: `semgrep`
- Args: `{ "-q", "--json", "$FILENAME" }`

### [shellcheck](https://www.shellcheck.net/)

A shell script static analysis tool.

#### Usage


#### Defaults

- Filetypes: `{ "sh" }`
- Method: `diagnostics`
- Command: `shellcheck`
- Args: `{ "--format", "json1", "--source-path=$DIRNAME", "--external-sources", "-" }`

### [solhint](https://protofire.github.io/solhint/)

An open source project for linting Solidity code. It provides both security and style guide validations.

#### Usage


#### Defaults

- Filetypes: `{ "solidity" }`
- Method: `diagnostics`
- Command: `solhint`
- Args: `{ "$FILENAME", "--formatter", "unix" }`

### [sqlfluff](https://github.com/sqlfluff/sqlfluff)

A SQL linter and auto-formatter for Humans

#### Usage

	null_ls.builtins.diagnostics.sqlfluff.with({
		extra_args = {"--dialect", "postgres"} -- change to your dialect
	})
}

#### Defaults

- Filetypes: `{ "sql" }`
- Method: `diagnostics`
- Command: `sqlfluff`
- Args: `{ "lint", "-f", "github-annotation", "-n", "--disable_progress_bar", "-" }`

#### Notes

- SQLFluff needs a mandatory `--dialect` argument. Use `extra_args` to add yours. `extra_args` can also be a function to build more sophisticated logic.

### [standardjs](https://standardjs.com/)

JavaScript style guide, linter, and formatter.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact" }`
- Method: `diagnostics`
- Command: `standard`
- Args: `{ "--stdin" }`

### [standardrb](https://github.com/testdouble/standard)

Ruby style guide, linter, and formatter.

#### Usage


#### Defaults

- Filetypes: `{ "ruby" }`
- Method: `diagnostics`
- Command: `standardrb`
- Args: `{ "--no-fix", "-f", "json", "--stdin", "$FILENAME" }`

### [staticcheck](https://staticcheck.io/)

Advanced Go linter.

#### Usage


#### Defaults

- Filetypes: `{ "go" }`
- Method: `diagnostics_on_save`
- Command: `staticcheck`
- Args: `{ "-f", "json", "./..." }`

### [statix](https://github.com/nerdypepper/statix)

Lints and suggestions for the Nix programming language.

#### Usage


#### Defaults

- Filetypes: `{ "nix" }`
- Method: `diagnostics`
- Command: `statix`
- Args: `{ "check", "--stdin", "--format=errfmt" }`

### [stylelint](https://github.com/stylelint/stylelint)

A mighty, modern linter that helps you avoid errors and enforce conventions in your styles.

#### Usage


#### Defaults

- Filetypes: `{ "scss", "less", "css", "sass" }`
- Method: `diagnostics`
- Command: `stylelint`
- Args: `{ "--formatter", "json", "--stdin-filename", "$FILENAME" }`

### [stylint](https://github.com/SimenB/stylint)

A linter for the Stylus CSS preprocessor.

#### Usage


#### Defaults

- Filetypes: `{ "stylus" }`
- Method: `diagnostics`
- Command: `stylint`
- Args: `{ "$FILENAME" }`

### [teal](https://github.com/teal-language/tl)

The compiler for Teal, a typed dialect of Lua.

#### Usage


#### Defaults

- Filetypes: `{ "teal" }`
- Method: `diagnostics`
- Command: `tl`
- Args: `{ "check", "$FILENAME" }`

### [textlint](https://github.com/textlint/textlint)

The pluggable linting tool for text and Markdown.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `diagnostics`
- Command: `textlint`
- Args: `{ "-f", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

### [tidy](https://www.html-tidy.org/)

Tidy corrects and cleans up HTML and XML documents by fixing markup errors and upgrading legacy code to modern standards.

#### Usage


#### Defaults

- Filetypes: `{ "html", "xml" }`
- Method: `diagnostics`
- Command: `tidy`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/diagnostics/tidy.lua))

### trail_space

Uses inbuilt Lua code to detect lines with trailing whitespace and show a diagnostic warning on each line where it's present.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `diagnostics`

### [tsc](https://www.typescriptlang.org/docs/handbook/compiler-options.html)

Parses diagnostics from the TypeScript compiler.

#### Usage


#### Defaults

- Filetypes: `{ "typescript", "typescriptreact" }`
- Method: `diagnostics_on_save`
- Command: `tsc`
- Args: `{ "--pretty", "false", "--noEmit" }`

### [twigcs](https://github.com/friendsoftwig/twigcs)

Runs Twigcs against Twig files.

#### Usage


#### Defaults

- Filetypes: `{ "twig" }`
- Method: `diagnostics`
- Command: `twigcs`
- Args: `{ "--reporter", "json", "$FILENAME" }`

### [vale](https://docs.errata.ai/vale/about)

Syntax-aware linter for prose built with speed and extensibility in mind.

#### Usage


#### Defaults

- Filetypes: `{ "markdown", "tex", "asciidoc" }`
- Method: `diagnostics`
- Command: `vale`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/diagnostics/vale.lua))

#### Notes

- vale does not include a syntax by itself, so you probably need to grab a `vale.ini` (at `~/.vale.ini`) and a StylesPath (somewhere, pointed from `vale.ini`) from [the list of configurations](https://docs.errata.ai/vale/about#open-source-configurations).

### [vint](https://github.com/Vimjas/vint)

Linter for Vimscript.

#### Usage


#### Defaults

- Filetypes: `{ "vim" }`
- Method: `diagnostics`
- Command: `vint`
- Args: `{ "--style-problem", "--json", "$FILENAME" }`

### [vulture](https://github.com/jendrikseipp/vulture)

Vulture finds unused code in Python programs.

#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Method: `diagnostics`
- Command: `vulture`
- Args: `{ "$FILENAME" }`

### [write_good](https://github.com/btford/write-good)

English prose linter.

#### Usage


#### Defaults

- Filetypes: `{ "markdown" }`
- Method: `diagnostics`
- Command: `write-good`
- Args: `{ "--text=$TEXT", "--parse" }`

### [xo](https://github.com/xojs/xo)

‚ù§Ô∏è JavaScript/TypeScript linter (ESLint wrapper) with great defaults.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact" }`
- Method: `diagnostics`
- Command: `xo`
- Args: `{ "--reporter", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

### [yamllint](https://github.com/adrienverge/yamllint)

A linter for YAML files.

#### Usage


#### Defaults

- Filetypes: `{ "yaml" }`
- Method: `diagnostics`
- Command: `yamllint`
- Args: `{ "--format", "parsable", "-" }`

### [zsh](https://www.zsh.org/)

Uses zsh's own -n option to evaluate, but not execute, zsh scripts. Effectively, this acts somewhat like a linter, although it only really checks for serious errors - and will likely only show the first error.

#### Usage


#### Defaults

- Filetypes: `{ "zsh" }`
- Method: `diagnostics`
- Command: `zsh`
- Args: `{ "-n", "$FILENAME" }`

## Formatting

### [alejandra](https://github.com/kamadorueda/alejandra)

The Uncompromising Nix Code Formatter

#### Usage


#### Defaults

- Filetypes: `{ "nix" }`
- Method: `formatting`
- Command: `alejandra`
- Args: `{ "--quiet" }`

### [asmfmt](https://github.com/klauspost/asmfmt)

Format your assembler code in a similar way that `gofmt` formats your `go` code.

#### Usage


#### Defaults

- Filetypes: `{ "asm" }`
- Method: `formatting`
- Command: `asmfmt`

### [astyle](http://astyle.sourceforge.net/)

Artistic Style is a source code indenter, formatter, and beautifier for the C, C++, C++/CLI, Objective‚ÄëC, C# and Java programming languages. This formatter works well for [Arduino](https://www.arduino.cc/) project files and is the same formatter used in the Arduino IDE.

#### Usage


#### Defaults

- Filetypes: `{ "arduino", "c", "cpp", "cs", "java" }`
- Method: `formatting`
- Command: `astyle`
- Args: `{ "--quiet" }`

### [autopep8](https://github.com/hhatto/autopep8)

A tool that automatically formats Python code to conform to the PEP 8 style guide.

#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Methods: `formatting, range_formatting`
- Command: `autopep8`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/autopep8.lua))

### [bean_format](https://beancount.github.io/docs/running_beancount_and_generating_reports.html#bean-format)

This pure text processing tool will reformat `beancount` input to right-align all the numbers at the same, minimal column.

#### Usage


#### Defaults

- Filetypes: `{ "beancount" }`
- Method: `formatting`
- Command: `bean-format`

#### Notes

- It left-aligns all the currencies.
- It only modifies whitespace.

### [bibclean](https://www.ctan.org/pkg/bibclean)

A portable program (written in C) that will pretty-print, syntax check, and generally sort out a BibTeX database file.

#### Usage


#### Defaults

- Filetypes: `{ "bib" }`
- Method: `formatting`
- Command: `bibclean`
- Args: `{ "-align-equals", "-delete-empty-values" }`

#### Notes

- See [bibclean: prettyprint and syntax check BibTeX and Scribe bibliography data base files](https://ftp.math.utah.edu/pub/bibclean/) for latest version.

### [black](https://github.com/psf/black)

The uncompromising Python code formatter

#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `black`
- Args: `{ "--stdin-filename", "$FILENAME", "--quiet", "-" }`

### [brittany](https://github.com/lspitzner/brittany)


#### Usage


#### Defaults

- Filetypes: `{ "haskell" }`
- Method: `formatting`
- Command: `brittany`

### [buf](https://github.com/bufbuild/buf)

A new way of working with Protocol Buffers.

#### Usage


#### Defaults

- Filetypes: `{ "proto" }`
- Method: `formatting`
- Command: `buf`
- Args: `{ "format", "$FILENAME" }`

### [buildifier](https://github.com/bazelbuild/buildtools/tree/master/buildifier)


#### Usage


#### Defaults

- Filetypes: `{ "bzl" }`
- Method: `formatting`
- Command: `buildifier`
- Args: `{ "-path=$FILENAME" }`

### [cabal_fmt](https://hackage.haskell.org/package/cabal-fmt)

Format .cabal files preserving the original field ordering, and comments.

#### Usage


#### Defaults

- Filetypes: `{ "cabal" }`
- Method: `formatting`
- Command: `cabal-fmt`

### [clang_format](https://www.kernel.org/doc/html/latest/process/clang-format.html)

Tool to format C/C++/‚Ä¶ code according to a set of rules and heuristics.

#### Usage


#### Defaults

- Filetypes: `{ "c", "cpp", "cs", "java" }`
- Method: `formatting`
- Command: `clang-format`
- Args: `{ "-assume-filename", "$FILENAME" }`

### [cljstyle](https://github.com/greglook/cljstyle)

Formatter for Clojure code.

#### Usage


#### Defaults

- Filetypes: `{ "clojure" }`
- Method: `formatting`
- Command: `cljstyle`
- Args: `{ "pipe" }`

### [cmake_format](https://github.com/cheshirekow/cmake_format)

Parse cmake listfiles and format them nicely.

#### Usage


#### Defaults

- Filetypes: `{ "cmake" }`
- Method: `formatting`
- Command: `cmake-format`
- Args: `{ "-" }`

### [codespell](https://github.com/codespell-project/codespell)

Fix common misspellings in text files.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `formatting`
- Command: `codespell`
- Args: `{ "--write-changes", "$FILENAME" }`

### [crystal_format](https://github.com/crystal-lang/crystal)

A tool for automatically checking and correcting the style of code in a project.

#### Usage


#### Defaults

- Filetypes: `{ "crystal" }`
- Method: `formatting`
- Command: `crystal`
- Args: `{ "tool", "format" }`

### [cue_fmt](https://cuelang.org/)

A CUE language formatter.

#### Usage


#### Defaults

- Filetypes: `{ "cue" }`
- Method: `formatting`
- Command: `cue`
- Args: `{ "fmt", "$FILENAME" }`

### [dart_format](https://dart.dev/tools/dart-format)

Replace the whitespace in your program with formatting that follows Dart guidelines.

#### Usage


#### Defaults

- Filetypes: `{ "dart" }`
- Method: `formatting`
- Command: `dart`
- Args: `{ "format" }`

### [deno_fmt](https://deno.land/manual/tools/formatter)

Use [Deno](https://deno.land/) to format TypeScript and JavaScript code.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact" }`
- Method: `formatting`
- Command: `deno`
- Args: `{ "fmt", "-" }`

### [dfmt](https://github.com/dlang-community/dfmt)

Formatter for D source code.

#### Usage


#### Defaults

- Filetypes: `{ "d" }`
- Method: `formatting`
- Command: `dfmt`

### [djhtml](https://github.com/rtts/djhtml)

A pure-Python Django/Jinja template indenter without dependencies.

#### Usage


#### Defaults

- Filetypes: `{ "django", "jinja.html", "htmldjango" }`
- Method: `formatting`
- Command: `djhtml`

### [djlint](https://github.com/Riverside-Healthcare/djLint)

‚ú® üìú ü™Ñ ‚ú® HTML Template Linter and Formatter.

#### Usage


#### Defaults

- Filetypes: `{ "django", "jinja.html", "htmldjango" }`
- Method: `formatting`
- Command: `djlint`
- Args: `{ "--reformat", "-" }`

### [elm_format](https://github.com/avh4/elm-format)


#### Usage


#### Defaults

- Filetypes: `{ "elm" }`
- Method: `formatting`
- Command: `elm-format`
- Args: `{ "--stdin" }`

### [erb_lint](https://github.com/Shopify/erb-lint)

Lint your ERB or HTML files

#### Usage


#### Defaults

- Filetypes: `{ "eruby" }`
- Method: `formatting`
- Command: `erblint`
- Args: `{ "--autocorrect", "--stdin", "$FILENAME" }`

### [erlfmt](https://github.com/WhatsApp/erlfmt)

An opinionated Erlang code formatter.

#### Usage


#### Defaults

- Filetypes: `{ "erlang" }`
- Method: `formatting`
- Command: `erlfmt`
- Args: `{ "-" }`

### [eslint](https://github.com/eslint/eslint)

Find and fix problems in your JavaScript code.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact", "vue" }`
- Method: `formatting`
- Command: `eslint`
- Args: `{ "--fix-dry-run", "--format", "json", "--stdin", "--stdin-filename", "$FILENAME" }`

#### Notes

- Slow and not suitable for formatting on save. If at all possible, use [eslint_d](https://github.com/mantoni/eslint_d.js/).

### [eslint_d](https://github.com/mantoni/eslint_d.js/)

Like ESLint, but faster.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact", "vue" }`
- Method: `formatting`
- Command: `eslint_d`
- Args: `{ "--fix-to-stdout", "--stdin", "--stdin-filename", "$FILENAME" }`

#### Notes

- Once spawned, the server will continue to run in the background. This is normal and not related to null-ls. You can stop it by running `eslint_d stop` from the command line.

### [fish_indent](https://fishshell.com/docs/current/cmds/fish_indent.html)

Indent or otherwise prettify a piece of fish code.

#### Usage


#### Defaults

- Filetypes: `{ "fish" }`
- Method: `formatting`
- Command: `fish_indent`

### [fixjson](https://github.com/rhysd/fixjson)

A JSON file fixer/formatter for humans using (relaxed) JSON5.

#### Usage


#### Defaults

- Filetypes: `{ "json" }`
- Method: `formatting`
- Command: `fixjson`

### [fnlfmt](https://git.sr.ht/~technomancy/fnlfmt)


#### Usage


#### Defaults

- Filetypes: `{ "fennel", "fnl" }`
- Method: `formatting`
- Command: `fnlfmt`
- Args: `{ "-" }`

### [format_r](https://github.com/yihui/formatR)

Format R code automatically.

#### Usage


#### Defaults

- Filetypes: `{ "r", "rmd" }`
- Method: `formatting`
- Command: `R`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/format_r.lua))

### [fourmolu](https://hackage.haskell.org/package/fourmolu)

Fourmolu is a formatter for Haskell source code.

#### Usage


#### Defaults

- Filetypes: `{ "haskell" }`
- Method: `formatting`
- Command: `fourmolu`

### [fprettify](https://github.com/pseewald/fprettify)


#### Usage


#### Defaults

- Filetypes: `{ "fortran" }`
- Method: `formatting`
- Command: `fprettify`
- Args: `{ "--silent" }`

### [gofmt](https://pkg.go.dev/cmd/gofmt)

Formats go programs.

#### Usage


#### Defaults

- Filetypes: `{ "go" }`
- Method: `formatting`
- Command: `gofmt`

#### Notes

- It uses tabs for indentation and blanks for alignment.
- Aligntment assumes that the editor is using a fixed-width font.

### [gofumpt](https://github.com/mvdan/gofumpt)

Enforce a stricter format than gofmt, while being backwards compatible. That is, gofumpt is happy with a subset of the formats that gofmt is happy with.

#### Usage


#### Defaults

- Filetypes: `{ "go" }`
- Method: `formatting`
- Command: `gofumpt`

### [goimports](https://pkg.go.dev/golang.org/x/tools/cmd/goimports)

Updates your Go import lines, adding missing ones and removing unreferenced ones.

#### Usage


#### Defaults

- Filetypes: `{ "go" }`
- Method: `formatting`
- Command: `goimports`
- Args: `{ "-srcdir", "$DIRNAME" }`

### [golines](https://pkg.go.dev/github.com/segmentio/golines)

Applies a base formatter (eg. goimports or gofmt), then shortens long lines of code.

#### Usage


#### Defaults

- Filetypes: `{ "go" }`
- Method: `formatting`
- Command: `golines`

### [google_java_format](https://github.com/google/google-java-format)

Reformats Java source code according to Google Java Style.

#### Usage


#### Defaults

- Filetypes: `{ "java" }`
- Method: `formatting`
- Command: `google-java-format`
- Args: `{ "-" }`

### [isort](https://github.com/PyCQA/isort)

Python utility / library to sort imports alphabetically and automatically separate them into sections and by type.

#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `isort`
- Args: `{ "--stdout", "--filename", "$FILENAME", "-" }`

### [joker](https://github.com/candid82/joker)


#### Usage


#### Defaults

- Filetypes: `{ "clj" }`
- Method: `formatting`
- Command: `joker`
- Args: `{ "--format", "-" }`

### [jq](https://github.com/stedolan/jq)

Command-line JSON processor

#### Usage


#### Defaults

- Filetypes: `{ "json" }`
- Method: `formatting`
- Command: `jq`

### [json_tool](https://docs.python.org/3/library/json.html#module-json.tool)

Provides a simple command line interface to validate and pretty-print JSON objects.

#### Usage


#### Defaults

- Filetypes: `{ "json" }`
- Method: `formatting`
- Command: `python`
- Args: `{ "-m", "json.tool" }`

### [ktlint](https://ktlint.github.io/)

An anti-bikeshedding Kotlin linter with built-in formatter.

#### Usage


#### Defaults

- Filetypes: `{ "kotlin" }`
- Method: `formatting`
- Command: `ktlint`
- Args: `{ "--format", "--stdin" }`

### [latexindent](https://github.com/cmhughes/latexindent.pl)

A perl script for formatting LaTeX files that is generally included in major TeX distributions.

#### Usage


#### Defaults

- Filetypes: `{ "tex" }`
- Method: `formatting`
- Command: `latexindent`
- Args: `{ "-" }`

### [lua_format](https://github.com/Koihik/LuaFormatter)

Reformats your Lua source code.

#### Usage


#### Defaults

- Filetypes: `{ "lua" }`
- Method: `formatting`
- Command: `lua-format`
- Args: `{ "-i" }`

### [markdownlint](https://github.com/igorshubovych/markdownlint-cli)

A Node.js style checker and lint tool for Markdown/CommonMark files.

#### Usage


#### Defaults

- Filetypes: `{ "markdown" }`
- Method: `formatting`
- Command: `markdownlint`
- Args: `{ "--fix", "$FILENAME" }`

#### Notes

- Can fix some (but not all!) markdownlint issues. If possible, use [Prettier](https://github.com/prettier/prettier), which can also fix Markdown files.

### [mix](https://hexdocs.pm/mix/1.12/Mix.html)

Build tool that provides tasks for creating, compiling, and testing elixir projects, managing its dependencies, and more.

#### Usage


#### Defaults

- Filetypes: `{ "elixir" }`
- Method: `formatting`
- Command: `mix`
- Args: `{ "format", "-" }`

### [nginx_beautifier](https://github.com/vasilevich/nginxbeautifier)

Beautifies and formats nginx configuration files.

#### Usage


#### Defaults

- Filetypes: `{ "nginx" }`
- Method: `formatting`
- Command: `nginxbeautifier`
- Args: `{ "-i", "-o", "$FILENAME" }`

### [nimpretty](https://nim-lang.org/docs/tools.html)


#### Usage


#### Defaults

- Filetypes: `{ "nim" }`
- Method: `formatting`
- Command: `nimpretty`
- Args: `{ "$FILENAME" }`

### [nixfmt](https://github.com/serokell/nixfmt)


#### Usage


#### Defaults

- Filetypes: `{ "nix" }`
- Method: `formatting`
- Command: `nixfmt`

### [nixpkgs_fmt](https://github.com/nix-community/nixpkgs-fmt)


#### Usage


#### Defaults

- Filetypes: `{ "nix" }`
- Method: `formatting`
- Command: `nixpkgs-fmt`

### [perltidy](http://perltidy.sourceforge.net/)


#### Usage


#### Defaults

- Filetypes: `{ "perl" }`
- Method: `formatting`
- Command: `perltidy`
- Args: `{ "-q" }`

### [pg_format](https://github.com/darold/pgFormatter)

PostgreSQL SQL syntax beautifier

#### Usage


#### Defaults

- Filetypes: `{ "sql", "pgsql" }`
- Method: `formatting`
- Command: `pg_format`

### [phpcbf](https://github.com/squizlabs/PHP_CodeSniffer)

Tokenizes PHP files and detects violations of a defined set of coding standards.

#### Usage


#### Defaults

- Filetypes: `{ "php" }`
- Method: `formatting`
- Command: `phpcbf`
- Args: `{ "-q", "--stdin-path=$FILENAME", "-" }`

### [phpcsfixer](https://github.com/FriendsOfPhp/PHP-CS-Fixer)

Formatter for php files.

#### Usage


#### Defaults

- Filetypes: `{ "php" }`
- Method: `formatting`
- Command: `php-cs-fixer`
- Args: `{ "--no-interaction", "--quiet", "fix", "$FILENAME" }`

### [prettier](https://github.com/prettier/prettier)

Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact", "vue", "css", "scss", "less", "html", "json", "jsonc", "yaml", "markdown", "graphql", "handlebars" }`
- Methods: `formatting, range_formatting`
- Command: `prettier`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/prettier.lua))

#### Notes

- Supports more filetypes such as [Svelte](https://github.com/sveltejs/prettier-plugin-svelte) and [TOML](https://github.com/bd82/toml-tools/tree/master/packages/prettier-plugin-toml) via plugins. These filetypes are not enabled by default, but you can follow the instructions [here](#filetypes) to define your own list of filetypes.
- To increase speed, you may want to try [prettierd](https://github.com/fsouza/prettierd). You can also set up [eslint-plugin-prettier](https://github.com/prettier/eslint-plugin-prettier) and format via [eslint_d](https://github.com/mantoni/eslint_d.js/).

### [prettierd](https://github.com/fsouza/prettierd)


#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact", "vue", "css", "scss", "less", "html", "json", "jsonc", "yaml", "markdown", "graphql", "handlebars" }`
- Method: `formatting`
- Command: `prettierd`
- Args: `{ "$FILENAME" }`

### [prettier_d_slim](https://github.com/mikew/prettier_d_slim)

Makes prettier fast.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact", "vue", "css", "scss", "less", "html", "json", "jsonc", "yaml", "markdown", "graphql", "handlebars" }`
- Methods: `formatting, range_formatting`
- Command: `prettier_d_slim`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/prettier_d_slim.lua))

#### Notes

- May not work on some filetypes.
- `prettierd` is more stable and recommended.

### [prettier_standard](https://github.com/sheerun/prettier-standard)

Formats with Prettier and lints with ESLint+Standard! (‚úø‚ó†‚Äø‚ó†)

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact" }`
- Method: `formatting`
- Command: `prettier-standard`
- Args: `{ "--stdin" }`

### [prismaFmt](https://github.com/prisma/prisma-engines)

Formatter for the prisma filetype.

#### Usage


#### Defaults

- Filetypes: `{ "prisma" }`
- Method: `formatting`
- Command: `prisma-fmt`
- Args: `{ "format", "-i", "$FILENAME" }`

### [protolint](https://github.com/yoheimuta/protolint)

A pluggable linter and fixer to enforce Protocol Buffer style and conventions.

#### Usage


#### Defaults

- Filetypes: `{ "proto" }`
- Method: `formatting`
- Command: `protolint`
- Args: `{ "--fix", "$FILENAME" }`

### [ptop](https://www.freepascal.org/tools/ptop.html)

The FPC Pascal configurable source beautifier. Name means 'Pascal-TO-Pascal'.

#### Usage


#### Defaults

- Filetypes: `{ "pascal", "delphi" }`
- Method: `formatting`
- Command: `ptop`
- Args: `{ "$FILENAME", "$FILENAME" }`

### [puppet_lint](http://puppet-lint.com/)

Check that your Puppet manifest conforms to the style guide

#### Usage


#### Defaults

- Filetypes: `{ "puppet", "epuppet" }`
- Method: `formatting`
- Command: `puppet-lint`
- Args: `{ "--fix", "$FILENAME" }`

### [qmlformat](https://doc-snapshots.qt.io/qt6-dev/qtquick-tools-and-utilities.html#qmlformat)


#### Usage


#### Defaults

- Filetypes: `{ "qml" }`
- Method: `formatting`
- Command: `qmlformat`
- Args: `{ "-i", "$FILENAME" }`

### [raco_fmt](https://docs.racket-lang.org/fmt/)

The fmt package provides an extensible tool to format Racket code, using an expressive pretty printer library to compute the optimal layout.

#### Usage


#### Defaults

- Filetypes: `{ "racket" }`
- Method: `formatting`
- Command: `raco`
- Args: `{ "fmt" }`

#### Notes

- Requires Racket 8.0 or later
- Install with `raco pkg install fmt`

### [remark](https://github.com/remarkjs/remark)


#### Usage


#### Defaults

- Filetypes: `{ "markdown" }`
- Method: `formatting`
- Command: `remark`
- Args: `{ "--no-color", "--silent" }`

#### Notes

- Depends on [remark-cli](https://github.com/remarkjs/remark/tree/main/packages/remark-cli).

### [reorder_python_imports](https://github.com/asottile/reorder_python_imports)

Tool for automatically reordering python imports. Similar to isort but uses static analysis more.

#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Method: `formatting`
- Command: `reorder-python-imports`
- Args: `{ "-", "--exit-zero-even-if-changed" }`

### [rescript](https://rescript-lang.org/)

The ReScript format builtin.

#### Usage


#### Defaults

- Filetypes: `{ "rescript" }`
- Method: `formatting`
- Command: `rescript`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/rescript.lua))

### [rome](https://rome.tools)

Formatter, linter, bundler, and more for JavaScript, TypeScript, JSON, HTML, Markdown, and CSS.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "typescript" }`
- Method: `formatting`
- Command: `rome`
- Args: `{ "format", "--write", "$FILENAME" }`

#### Notes

- Currently support only JavaScript and TypeScript. See status [here](https://rome.tools/#language-support)

### [rubocop](https://github.com/rubocop/rubocop)

Ruby static code analyzer and formatter, based on the community Ruby style guide.

#### Usage


#### Defaults

- Filetypes: `{ "ruby" }`
- Method: `formatting`
- Command: `rubocop`
- Args: `{ "--auto-correct", "-f", "quiet", "--stderr", "--stdin", "$FILENAME" }`

### [rufo](https://github.com/ruby-formatter/rufo)

Opinionated ruby formatter.

#### Usage


#### Defaults

- Filetypes: `{ "ruby" }`
- Method: `formatting`
- Command: `rufo`
- Args: `{ "-x" }`

### [rustfmt](https://github.com/rust-lang/rustfmt)

A tool for formatting rust code according to style guidelines.

#### Usage


#### Defaults

- Filetypes: `{ "rust" }`
- Method: `formatting`
- Command: `rustfmt`
- Args: `{ "--emit=stdout" }`

#### Notes

- `--edition` defaults to `2015`. To set a different edition, use `extra_args`.
- See [the wiki](https://github.com/jose-elias-alvarez/null-ls.nvim/wiki/Source-specific-Configuration#rustfmt) for other workarounds.

### [rustywind](https://github.com/avencera/rustywind)

CLI for organizing Tailwind CSS classes.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact", "typescript", "typescriptreact", "vue", "svelte", "html" }`
- Method: `formatting`
- Command: `rustywind`
- Args: `{ "--stdin" }`

### [scalafmt](https://github.com/scalameta/scalafmt)

Code formatter for Scala

#### Usage


#### Defaults

- Filetypes: `{ "scala" }`
- Method: `formatting`
- Command: `scalafmt`
- Args: `{ "--stdin" }`

### [shellharden](https://github.com/anordal/shellharden)

Hardens shell scripts by quoting variables, replacing `function_call` with `$(function_call)`, and more.

#### Usage


#### Defaults

- Filetypes: `{ "sh" }`
- Method: `formatting`
- Command: `shellharden`
- Args: `{ "--transform", "" }`

### [shfmt](https://github.com/mvdan/sh)

A shell parser, formatter, and interpreter with `bash` support.

#### Usage


#### Defaults

- Filetypes: `{ "sh" }`
- Method: `formatting`
- Command: `shfmt`
- Args: `{ "-filename", "$FILENAME" }`

### [sqlfluff](https://github.com/sqlfluff/sqlfluff)

A SQL linter and auto-formatter for Humans

#### Usage

	null_ls.builtins.formatting.sqlfluff.with({
		extra_args = {"--dialect", "postgres"} -- change to your dialect
	})
}

#### Defaults

- Filetypes: `{ "sql" }`
- Method: `formatting`
- Command: `sqlfluff`
- Args: `{ "fix", "--disable_progress_bar", "-f", "-n", "-" }`

#### Notes

- SQLFluff needs a mandatory `--dialect` argument. Use `extra_args` to add yours. `extra_args` can also be a function to build more sophisticated logic.

### [sqlformat](https://manpages.ubuntu.com/manpages/xenial/man1/sqlformat.1.html)

The sqlformat command-line tool can reformat SQL files according to specified options.

#### Usage


#### Defaults

- Filetypes: `{ "sql" }`
- Method: `formatting`
- Command: `sqlformat`
- Args: `{ "-" }`

### [standardjs](https://standardjs.com/)

JavaScript Standard Style, a no-configuration automatic code formatter that just works.

#### Usage


#### Defaults

- Filetypes: `{ "javascript", "javascriptreact" }`
- Method: `formatting`
- Command: `standard`
- Args: `{ "--stdin", "--fix" }`

### [standardrb](https://github.com/testdouble/standard)

Ruby Style Guide, with linter & automatic code fixer. Based on Rubocop.

#### Usage


#### Defaults

- Filetypes: `{ "ruby" }`
- Method: `formatting`
- Command: `standardrb`
- Args: `{ "--fix", "--format", "quiet", "--stderr", "--stdin", "$FILENAME" }`

### [stylelint](https://github.com/stylelint/stylelint)

A mighty, modern linter that helps you avoid errors and enforce conventions in your styles.

#### Usage


#### Defaults

- Filetypes: `{ "scss", "less", "css", "sass" }`
- Method: `formatting`
- Command: `stylelint`
- Args: `{ "--fix", "--stdin", "--stdin-filename", "$FILENAME" }`

### [styler](https://github.com/r-lib/styler)

Non-invasive pretty printing of R code.

#### Usage


#### Defaults

- Filetypes: `{ "r", "rmd" }`
- Method: `formatting`
- Command: `R`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/styler.lua))

### [stylua](https://github.com/JohnnyMorganz/StyLua)

An opinionated code formatter for Lua.

#### Usage


#### Defaults

- Filetypes: `{ "lua" }`
- Methods: `formatting, range_formatting`
- Command: `stylua`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/stylua.lua))

### [surface](https://hexdocs.pm/surface_formatter/readme.html)

A code formatter for Surface, the server-side rendering component library for Phoenix.

#### Usage


#### Defaults

- Filetypes: `{ "elixir", "surface" }`
- Method: `formatting`
- Command: `mix`
- Args: `{ "surface.format", "-" }`

### [swiftformat](https://github.com/nicklockwood/SwiftFormat)

SwiftFormat is a code library and command-line tool for reformatting `swift` code on macOS or Linux.

#### Usage


#### Defaults

- Filetypes: `{ "swift" }`
- Method: `formatting`
- Command: `swiftformat`

### [taplo](https://taplo.tamasfe.dev/)

A versatile, feature-rich TOML toolkit.

#### Usage


#### Defaults

- Filetypes: `{ "toml" }`
- Method: `formatting`
- Command: `taplo`
- Args: `{ "format", "-" }`

### [terrafmt](https://github.com/katbyte/terrafmt)

The terrafmt command formats `terraform` blocks embedded in Markdown files.

#### Usage


#### Defaults

- Filetypes: `{ "markdown" }`
- Method: `formatting`
- Command: `terrafmt`
- Args: `{ "fmt", "$FILENAME" }`

### [terraform_fmt](https://www.terraform.io/docs/cli/commands/fmt.html)

The terraform-fmt command rewrites `terraform` configuration files to a canonical format and style.

#### Usage


#### Defaults

- Filetypes: `{ "terraform", "tf" }`
- Method: `formatting`
- Command: `terraform`
- Args: `{ "fmt", "-" }`

### [tidy](https://www.html-tidy.org/)

Tidy corrects and cleans up HTML and XML documents by fixing markup errors and upgrading legacy code to modern standards.

#### Usage


#### Defaults

- Filetypes: `{ "html", "xml" }`
- Method: `formatting`
- Command: `tidy`
- Args: `{ "--tidy-mark", "no", "-quiet", "-indent", "-wrap", "-" }`

### trim_newlines

A simple wrapper around `awk` to remove trailing newlines.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `formatting`
- Command: `awk`
- Args: `{ 'NF{print s $0; s=""; next} {s=s ORS}' }`

### trim_whitespace

A simple wrapper around `awk` to remove trailing whitespace.

#### Usage


#### Defaults

- Filetypes: `{}`
- Method: `formatting`
- Command: `awk`
- Args: `{ '{ sub(/[ \t]+$/, ""); print }' }`

### [uncrustify](https://github.com/uncrustify/uncrustify)

A source code beautifier for C, C++, C#, ObjectiveC, D, Java, Pawn and Vala.

#### Usage


#### Defaults

- Filetypes: `{ "c", "cpp", "cs", "java" }`
- Method: `formatting`
- Command: `uncrustify`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/uncrustify.lua))

### [verible_verilog_format](https://github.com/chipsalliance/verible)

The verible-verilog-format formatter manages whitespace in accordance with a particular style. The main goal is to relieve humans of having to manually manage whitespace, wrapping, and indentation, and to provide a tool that can be integrated into any editor to enable editor-independent consistency.

#### Usage


#### Defaults

- Filetypes: `{ "verilog", "systemverilog" }`
- Method: `formatting`
- Command: `verible-verilog-format`
- Args: `{ "--stdin_name", "$FILENAME", "-" }`

### [xmllint](http://xmlsoft.org/xmllint.html)

Despite the name, xmllint can be used to format XML files as well as lint them, and that's the mode this builtin is using.

#### Usage


#### Defaults

- Filetypes: `{ "xml" }`
- Method: `formatting`
- Command: `xmllint`
- Args: `{ "--format", "-" }`

### [yapf](https://github.com/google/yapf)

Formatter for Python.

#### Usage


#### Defaults

- Filetypes: `{ "python" }`
- Methods: `formatting, range_formatting`
- Command: `yapf`
- Args: dynamically resolved (see [source](https://github.com/jose-elias-alvarez/null-ls.nvim/blob/main/lua/null-ls/builtins/formatting/yapf.lua))

### [zigfmt](https://github.com/ziglang/zig)

Reformat Zig source into canonical form.

#### Usage


#### Defaults

- Filetypes: `{ "zig" }`
- Method: `formatting`
- Command: `zig`
- Args: `{ "fmt", "--stdin" }`

## Hover

### [dictionary](https://dictionaryapi.dev/)

Shows the first available definition for the current word under the cursor.

#### Usage


#### Defaults

- Filetypes: `{ "text", "markdown" }`
- Method: `hover`

#### Notes

- Depends on Plenary's `curl` module, which itself depends on having `curl` installed and available on your `$PATH`.
